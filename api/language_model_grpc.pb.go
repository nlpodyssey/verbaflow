// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: language_model.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LanguageModelClient is the client API for LanguageModel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LanguageModelClient interface {
	// GenerateTokens generates tokens for the given prompt using the specified decoding parameters.
	// The response is a stream of GeneratedToken messages, each containing a generated token and its score and encoded representation.
	GenerateTokens(ctx context.Context, in *TokenGenerationRequest, opts ...grpc.CallOption) (LanguageModel_GenerateTokensClient, error)
}

type languageModelClient struct {
	cc grpc.ClientConnInterface
}

func NewLanguageModelClient(cc grpc.ClientConnInterface) LanguageModelClient {
	return &languageModelClient{cc}
}

func (c *languageModelClient) GenerateTokens(ctx context.Context, in *TokenGenerationRequest, opts ...grpc.CallOption) (LanguageModel_GenerateTokensClient, error) {
	stream, err := c.cc.NewStream(ctx, &LanguageModel_ServiceDesc.Streams[0], "/api.LanguageModel/GenerateTokens", opts...)
	if err != nil {
		return nil, err
	}
	x := &languageModelGenerateTokensClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LanguageModel_GenerateTokensClient interface {
	Recv() (*GeneratedToken, error)
	grpc.ClientStream
}

type languageModelGenerateTokensClient struct {
	grpc.ClientStream
}

func (x *languageModelGenerateTokensClient) Recv() (*GeneratedToken, error) {
	m := new(GeneratedToken)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LanguageModelServer is the server API for LanguageModel service.
// All implementations must embed UnimplementedLanguageModelServer
// for forward compatibility
type LanguageModelServer interface {
	// GenerateTokens generates tokens for the given prompt using the specified decoding parameters.
	// The response is a stream of GeneratedToken messages, each containing a generated token and its score and encoded representation.
	GenerateTokens(*TokenGenerationRequest, LanguageModel_GenerateTokensServer) error
	mustEmbedUnimplementedLanguageModelServer()
}

// UnimplementedLanguageModelServer must be embedded to have forward compatible implementations.
type UnimplementedLanguageModelServer struct {
}

func (UnimplementedLanguageModelServer) GenerateTokens(*TokenGenerationRequest, LanguageModel_GenerateTokensServer) error {
	return status.Errorf(codes.Unimplemented, "method GenerateTokens not implemented")
}
func (UnimplementedLanguageModelServer) mustEmbedUnimplementedLanguageModelServer() {}

// UnsafeLanguageModelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LanguageModelServer will
// result in compilation errors.
type UnsafeLanguageModelServer interface {
	mustEmbedUnimplementedLanguageModelServer()
}

func RegisterLanguageModelServer(s grpc.ServiceRegistrar, srv LanguageModelServer) {
	s.RegisterService(&LanguageModel_ServiceDesc, srv)
}

func _LanguageModel_GenerateTokens_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TokenGenerationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LanguageModelServer).GenerateTokens(m, &languageModelGenerateTokensServer{stream})
}

type LanguageModel_GenerateTokensServer interface {
	Send(*GeneratedToken) error
	grpc.ServerStream
}

type languageModelGenerateTokensServer struct {
	grpc.ServerStream
}

func (x *languageModelGenerateTokensServer) Send(m *GeneratedToken) error {
	return x.ServerStream.SendMsg(m)
}

// LanguageModel_ServiceDesc is the grpc.ServiceDesc for LanguageModel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LanguageModel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.LanguageModel",
	HandlerType: (*LanguageModelServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateTokens",
			Handler:       _LanguageModel_GenerateTokens_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "language_model.proto",
}
