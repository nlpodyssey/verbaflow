package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"errors"

	"github.com/nlpodyssey/verbaflow/gqlserver/authorization"
	"github.com/nlpodyssey/verbaflow/gqlserver/graph/model"
	"github.com/rs/zerolog/log"
)

// SignIn is the resolver for the signIn field.
func (r *mutationResolver) SignIn(ctx context.Context) (*model.SignInPayload, error) {
	user, err := authorization.SignIn(ctx)
	if err != nil {
		log.Err(err).Msg("failed to sign-in user")
		return nil, errors.New("internal server error")
	}
	if user == nil {
		return &model.SignInPayload{
			Error: &model.Error{Message: "authentication failed"},
		}, nil
	}
	return &model.SignInPayload{
		User: &model.User{Username: user.Username},
	}, nil
}

// SignOut is the resolver for the signOut field.
func (r *mutationResolver) SignOut(ctx context.Context) (*model.SignOutPayload, error) {
	authorization.SignOut(ctx)
	return &model.SignOutPayload{}, nil
}

// CurrentUser is the resolver for the currentUser field.
func (r *queryResolver) CurrentUser(ctx context.Context) (*model.User, error) {
	user := authorization.UserForContext(ctx)
	return &model.User{Username: user.Username}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
